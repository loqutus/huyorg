!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
PROJECT_MAIN_H	main.h	/^#define PROJECT_MAIN_H$/;"	d
PROJECT_MASTER_H	master.h	/^#define PROJECT_MASTER_H$/;"	d
PROJECT_WATCHER_H	watcher.h	/^#define PROJECT_WATCHER_H$/;"	d
check_pod_in_containers	watcher.cpp	/^bool check_pod_in_containers(std::string pod_name, std::vector<std::string> containers_list){$/;"	f	signature:(std::string pod_name, std::vector<std::string> containers_list)
conf	master.h	/^	confreader conf;$/;"	m	class:master	access:private
conf_file	master.h	/^	const std::string conf_file;$/;"	m	class:master	access:private
do_action	master.cpp	/^std::string master::do_action(std::unordered_map<std::string, std::string> json_map){$/;"	f	class:master	signature:(std::unordered_map<std::string, std::string> json_map)
get_host	watcher.cpp	/^std::string watcher::get_host(std::string host_port){$/;"	f	class:watcher	signature:(std::string host_port)
get_port	watcher.cpp	/^std::string watcher::get_port(std::string host_port){$/;"	f	class:watcher	signature:(std::string host_port)
get_running_containers	watcher.cpp	/^std::unordered_map<std::string, std::list<std::string> > watcher::get_running_containers(){$/;"	f	class:watcher	signature:()
listen	master.cpp	/^void master::listen(){$/;"	f	class:master	signature:()
log	master.h	/^	logging log;$/;"	m	class:master	access:private
main	main.cpp	/^int main(int argc, char **argv) {$/;"	f	signature:(int argc, char **argv)
master	master.cpp	/^master::master() :$/;"	f	class:master	signature:()
master	master.h	/^class master{$/;"	c
master::conf	master.h	/^	confreader conf;$/;"	m	class:master	access:private
master::conf_file	master.h	/^	const std::string conf_file;$/;"	m	class:master	access:private
master::do_action	master.cpp	/^std::string master::do_action(std::unordered_map<std::string, std::string> json_map){$/;"	f	class:master	signature:(std::unordered_map<std::string, std::string> json_map)
master::listen	master.cpp	/^void master::listen(){$/;"	f	class:master	signature:()
master::log	master.h	/^	logging log;$/;"	m	class:master	access:private
master::master	master.cpp	/^master::master() :$/;"	f	class:master	signature:()
master::server_port	master.h	/^	const std::string server_port;$/;"	m	class:master	access:private
master::~master	master.cpp	/^master::~master(){$/;"	f	class:master	signature:()
run_container	watcher.cpp	/^std::string run_container(std::string slave, std::string image, std::string command){$/;"	f	signature:(std::string slave, std::string image, std::string command)
run_master	main.cpp	/^void run_master(){$/;"	f	signature:()
run_watcher	main.cpp	/^void run_watcher(){$/;"	f	signature:()
server_port	master.h	/^	const std::string server_port;$/;"	m	class:master	access:private
watch	watcher.cpp	/^void watcher::watch(){$/;"	f	class:watcher	signature:()
watcher	watcher.h	/^class watcher{$/;"	c
watcher::get_host	watcher.cpp	/^std::string watcher::get_host(std::string host_port){$/;"	f	class:watcher	signature:(std::string host_port)
watcher::get_port	watcher.cpp	/^std::string watcher::get_port(std::string host_port){$/;"	f	class:watcher	signature:(std::string host_port)
watcher::get_running_containers	watcher.cpp	/^std::unordered_map<std::string, std::list<std::string> > watcher::get_running_containers(){$/;"	f	class:watcher	signature:()
watcher::watch	watcher.cpp	/^void watcher::watch(){$/;"	f	class:watcher	signature:()
~master	master.cpp	/^master::~master(){$/;"	f	class:master	signature:()
